from json import dumps
from secrets import token_hex
from typing import Union, Optional, Type

from bokeh.plotting.figure import Figure as _Figure
from bokeh.themes.theme import Theme
from bokeh.embed import json_item
from bokeh.embed.util import FromCurdoc

from .grid_object import GridObject
from .._utils import check_type


class BokehFigure(GridObject):
    """Represents a Bokeh figure, with an additional function to return the Bokeh JS code.

    Parameters
    ----------
    fig: bokeh.plotting.figure.Figure
        A Bokeh Figure object.
    row: int
        The grid row in which to place this plot.
    column: int
        The grid column in which to place this plot.
    row_span: int, default=1
        The number of rows for this plot to span.
    col_span: int, default=1
        The number of columns for this plot to span.
    css_class: str, optional
        The name of the CSS class (or classes) to apply to this object.
    bokeh_theme: bokeh.themes.theme.Theme, optional
        A Bokeh theme object to apply to the plot.
    """

    def __init__(self,
                 fig: _Figure,
                 row: int,
                 column: int,
                 row_span: int = 1,
                 col_span: int = 1,
                 css_class: Optional[str] = None,
                 bokeh_theme: Optional[Union[Theme, Type[FromCurdoc]]] = None
                 ):

        # Note: not as strict on the Bokeh object typechecking here, as the caller should have already done that.
        # Will this stuff us up at some point? Who knows!
        self.fig = fig
        self.theme = bokeh_theme

        self._check_and_set(row, column, row_span, col_span, css_class)

        # Generate an ID for this figure - we'll use this later.
        self.fig_id = token_hex(5)

    def get_plot_js(self) -> str:
        """Create the Bokeh.embed.embed_item(...) JS function for this plot.

        Note: the required <div> tags for the plot are generated by the `get_div()` function.

        Returns
        -------
        str
            The Bokeh.embed.embed_item(...) function for this plot.
        """
        bokeh_dict = json_item(self.fig, target=self.fig_id, theme=self.theme)
        bokeh_js_str = f"Bokeh.embed.embed_item({dumps(bokeh_dict)})"
        return bokeh_js_str

    def get_div(self) -> str:
        """Get the required <div></div> HTML tags to display this plot.

        Returns
        -------
        str
        """
        div_str = f'<div {self._style_str}><div id="{self.fig_id}"></div></div>'
        return div_str

    @property
    def _style_str(self):
        css_str = f"grid-column : {self.column} / {self.column + self.col_span}; grid-row : {self.row} / {self.row + self.row_span};"
        css_str += f" width: {self.fig.width}px; height: {self.fig.height}px;"

        if self.css_class:
            class_str = f' class="{self.css_class}"'
        else:
            class_str = ""

        style_str = f'style="{css_str}"{class_str}'
        return style_str

    def __str__(self):
        return self.get_div()

